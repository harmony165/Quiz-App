{"version":3,"sources":["component/Spinner/Spinner.js","container/Init/Init.js","component/Options/Options.js","container/Play/Play.js","component/Result/Result.js","App.js","serviceWorker.js","index.js"],"names":["className","props","btn","spinner","Spinner","onClick","click","Options","type","name","value","this","option","onChange","change","decodeURIComponent","Component","Play","state","timer","qNumber","questions","score","selectedAnswer","evaluate","setState","setInterval","a","setTimeout","correctAns","finished","next","question","answer","opt","length","options","map","ans","i","key","level","disabled","text","pass","play","App","getUrl","token","getToken","axios","get","res","data","results","q","incorrect_answers","push","correct_answer","shuffle","page","genre","category","console","log","passed","sort","Math","random","then","Init","start","Result","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed27abe9.chunk.js","sourcesContent":["import React from 'react'\n\nexport default () => {\n  return (\n    <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n  )\n}\n","import React from 'react'\nimport Spinner from '../../component/Spinner/Spinner'\n\nexport default (props) => {\n\n  let btn = props.spinner ? <Spinner /> : \n            <button\n              onClick={()=>props.click('play')}>Start Quiz</button>\n\n  return (\n    <div className=\"init\">\n      <h1><i><u>Quiz App</u></i></h1>\n      <p>This app tests how smart you are and how good you are in general information and current events. You are given 15 seconds to answer each question of 10. Each question is in multiple choice. You have to get at least 6 correct answers to proceed to the next level.</p>\n      {btn}\n    </div>\n  )\n}\n","import React, {Component} from 'react';\n\nclass Options extends Component {\n\n  render(){\n    \n    return (\n      <div className='opt'>\n        <div className=\"btn\">\n          <input type=\"radio\"  \n            name='option'\n            value={this.props.option}\n            onChange={()=>this.props.change(this.props.option)}/>\n          <label>{decodeURIComponent(this.props.option)}</label>\n        </div>\n      </div>\n  )}\n}\n\nexport default Options","import React, {Component} from 'react';\n\nimport Options from '../../component/Options/Options';\nimport Spinner from '../../component/Spinner/Spinner'\n\nclass Play extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      timer: 15,\n      qNumber: 1,\n      questions: {},\n      score: 0,\n      selectedAnswer: '',\n      evaluate: false\n    }\n  }\n\n  // set the questions to the state\n  componentDidMount(){\n    this.setState({\n      questions: this.props.questions,\n    })\n    this.timer()\n  }\n\n  // clock timer\n  timer(){\n      setInterval(() => {\n        if(this.state.timer === false) return\n        if(this.state.timer <= 1){\n          this.setState({\n            evaluate: 'spin',\n        })\n        }\n        if(this.state.timer === 0){\n          this.setState({\n            evaluate: 'no time',\n            selectedAnswer: false\n        })\n        } else {\n          this.setState({\n            timer: this.state.timer - 1\n          })\n        }\n      }, 1000)\n  }\n\n  // change selected answer\n  change(a){\n    this.setState({selectedAnswer: a})\n  }\n\n  // evaluate if answer is right\n  evaluate(){\n    setTimeout(()=>{\n      this.setState({evaluate: 'spin', timer: false})\n    }, 250)\n\n    setTimeout(()=>{\n      if (this.state.selectedAnswer === this.state.questions[this.state.qNumber - 1].correctAns){\n        this.setState({\n          evaluate: 'correct',\n          score: this.state.score + 1,\n        })\n        \n      } else if (this.state.selectedAnswer !== this.state.questions[this.state.qNumber - 1].correctAns){\n        this.setState({\n          evaluate: 'wrong'\n        })\n      }\n    }, 450)\n\n  }\n\n  next(){\n    if(this.state.qNumber === 10){\n      this.state.score >= 6 ? this.props.finished('pass') : this.props.finished('fail')\n    }\n    setTimeout(()=>{\n      this.setState({evaluate: 'spin', timer: false})\n    }, 150)\n    setTimeout(()=>{\n      this.setState({\n        timer: 15,\n        qNumber: this.state.qNumber + 1,\n        evaluate: false,\n        selectedAnswer: ''\n      })\n    },300)\n  }\n\n\n  click(){\n    if(this.state.evaluate === false){\n      this.evaluate()\n    } else {\n      this.next()\n    }\n  }\n\n\n\n  render(){\n    // console.log(this.state.selectedAnswer)\n\n    let question;\n    let options;\n    let answer;\n    let opt;\n                          \n    if(this.state.questions.length > 1){\n\n      question = this.state.questions[this.state.qNumber - 1].question\n      answer = this.state.questions[this.state.qNumber - 1].correctAns\n      options = this.state.questions[this.state.qNumber -1].options\n      opt = options.map((ans, i) => {\n        return <Options \n                  key={i}\n                  option={ans}\n                  answer={answer}\n                  change={(a)=>this.change(a)} />\n      })\n    }\n\n    // spinner\n    if(this.state.evaluate === 'spin'){\n      opt = <Spinner />\n    }\n    \n    // correct answer\n    if(this.state.evaluate === 'correct'){\n        opt = <div className=\"evaluate\">\n                <h1 >You are correct!</h1>\n                <p>The answer is;</p>\n                <p>{decodeURIComponent(this.state.questions[this.state.qNumber - 1].correctAns)}</p>\n              </div>\n    }\n\n    // wrong answer\n    if(this.state.evaluate === 'wrong'){\n         opt = <div className=\"evaluate\">\n                 <h1 >You are wrong!</h1>\n                 <p>The answer is;</p>\n                 <p>{decodeURIComponent(this.state.questions[this.state.qNumber - 1].correctAns)}</p>\n               </div>\n    }\n\n    // run out of time\n    if(this.state.evaluate === 'no time'){\n      opt = <div className=\"evaluate\">\n              <h1 >You run out of time. Thinks faster!</h1>\n              <p>The answer is;</p>\n              <p>{decodeURIComponent(this.state.questions[this.state.qNumber - 1].correctAns)}</p>\n            </div>\n    }\n\n\n\n    return (\n      <div className=\"play\">\n\n        <div className=\"top\">\n          <p>Level: {this.props.level}</p>\n          <p>Time left: {this.state.timer === false ? 0 : this.state.timer}</p>\n          <p>Score: {this.state.score}</p>\n        </div>\n\n        <div className=\"question\">\n          <h1>Question {this.state.qNumber}</h1>\n          <h1>{decodeURIComponent(question)}</h1>\n        </div>\n\n\n        <div className='options'>\n          {opt}\n        </div>\n       \n        <button\n          disabled={this.state.selectedAnswer === '' ? true : false}\n          onClick={()=>{\n            if(this.state.evaluate === false){\n              this.evaluate()\n            } else {\n              this.next()\n            }\n          }}>\n            {this.state.evaluate === false ? 'Check my answer!' :\n              'Continue!'}</button>\n      </div>\n  )}\n}\n\nexport default Play","import React, {Fragment} from 'react';\n\nexport default function (props){\n  let text;\n  if(props.pass){\n    text = <Fragment>\n              <h2>Congratulations!</h2>\n              <p>You passed the level!</p>\n              <button \n                onClick={()=>props.play()}>Play Again!</button>\n            </Fragment> \n  } else {\n    text = <Fragment>\n              <h2>Sorry!</h2>\n              <p>You did not pass the quiz.</p>\n              <button\n                onClick={()=>props.play()}>Try Again!</button>\n            </Fragment> \n  }\n\n  return (\n   <div className=\"result\">\n     {text}\n    </div>\n  );\n}\n","import React, {Component} from 'react';\nimport axios from 'axios'\nimport './App.css';\n\n\nimport Init from './container/Init/Init'\nimport Play from './container/Play/Play'\nimport Result from './component/Result/Result'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      page: 'init',\n      spinner: false,\n      questions: {},\n      level: 1,\n      passed: false,\n      token: '',\n      genre:''\n    }\n  }\n\n \n\n  shuffle(a) {\n    return a.sort(() => Math.random() - 0.5)\n  }\n\n  start (){\n    this.setState({spinner: !this.state.spinner})\n    setTimeout(()=>{\n      this.getUrl()  \n    }, 300)\n  }\n    \n  async getToken(){\n    await axios.get('https://opentdb.com/api_token.php?command=request')\n      .then(res => {\n        this.setState({token: res.data.token});\n        console.log(res.data.token);\n      })\n  }\n\n  getUrl = async () => {\n    if(this.state.token !== ''){\n      this.getToken()\n    }\n    \n    \n    let url = \"https://opentdb.com/api.php?amount=10&category=31&difficulty=easy&type=multiple\"\n    \n    let res = await axios.get(url)\n    \n    if (res.data.results) {\n      let questions = res.data.results.map((q)=>{\n        let opt = q.incorrect_answers\n        opt.push(q.correct_answer)\n        return {\n          question: q.question,\n          correctAns: q.correct_answer,\n          options: this.shuffle(opt)\n        }\n      })\n      this.setState({\n        questions,\n        page: 'play',\n        spinner: false,\n        genre: res.data.results[0].category\n      })\n      console.log(this.state);\n    }\n  }\n\n  finished(a){\n    if(a === 'pass') {\n      this.setState({page: 'result', passed: true})\n    } else if(a === 'fail'){\n      this.setState({page: 'result'})\n    }\n  }\n\n  play(){\n    this.getUrl()\n  }\n\n  render(){\n    let page = this.state.page === 'init' ? \n                  <Init \n                    click={(a)=>this.start(a)}\n                    spinner={this.state.spinner} \n                    genre={this.state.genre}/> : \n                    \n               this.state.page === 'play' ?\n                  <Play \n                    questions={this.state.questions}\n                    level={this.state.level}\n                    finished={(a)=>this.finished(a)} /> : \n\n               this.state.page === 'result' ? \n                  <Result \n                    pass={this.state.passed}\n                    play={()=>this.play()}/> : null\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          {page}\n      </div>\n    </div>\n  )}\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}