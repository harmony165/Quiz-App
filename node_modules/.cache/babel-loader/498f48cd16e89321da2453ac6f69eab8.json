{"ast":null,"code":"var _jsxFileName = \"/Users/kau/Desktop/GeoGo/Internship/Assignments/quiz/src/container/Play/Play.js\";\nimport React, { Component } from 'react';\nimport Options from '../../component/Options/Options';\nimport Spinner from '../../component/Spinner/Spinner';\n\nclass Play extends Component {\n  constructor() {\n    super();\n    this.state = {\n      timer: 15,\n      qNumber: 1,\n      questions: {},\n      score: 0,\n      selectedAnswer: '',\n      evaluate: false\n    };\n  } // set the questions to the state\n\n\n  componentDidMount() {\n    this.setState({\n      questions: this.props.questions\n    });\n    this.timer();\n  } // clock timer\n\n\n  timer() {\n    setInterval(() => {\n      if (this.state.timer === false) return;\n\n      if (this.state.timer <= 1) {\n        this.setState({\n          evaluate: 'spin'\n        });\n      }\n\n      if (this.state.timer === 0) {\n        this.setState({\n          evaluate: 'no time',\n          selectedAnswer: false\n        });\n      } else {\n        this.setState({\n          timer: this.state.timer - 1\n        });\n      }\n    }, 1000);\n  } // change selected answer\n\n\n  change(a) {\n    this.setState({\n      selectedAnswer: a\n    });\n  } // evaluate if answer is right\n\n\n  evaluate() {\n    setTimeout(() => {\n      this.setState({\n        evaluate: 'spin',\n        timer: false\n      });\n    }, 250);\n    setTimeout(() => {\n      if (this.state.selectedAnswer === this.state.questions[this.state.qNumber - 1].correctAns) {\n        this.setState({\n          evaluate: 'correct',\n          score: this.state.score + 1\n        });\n      } else if (this.state.selectedAnswer !== this.state.questions[this.state.qNumber - 1].correctAns) {\n        this.setState({\n          evaluate: 'wrong'\n        });\n      }\n    }, 450);\n  }\n\n  next() {\n    if (this.state.qNumber === 10) {\n      this.state.score >= 6 ? this.props.finished('pass') : this.props.finished('fail');\n    }\n\n    setTimeout(() => {\n      this.setState({\n        evaluate: 'spin',\n        timer: false\n      });\n    }, 150);\n    setTimeout(() => {\n      this.setState({\n        timer: 15,\n        qNumber: this.state.qNumber + 1,\n        evaluate: false,\n        selectedAnswer: ''\n      });\n    }, 300);\n  }\n\n  click() {\n    if (this.state.evaluate === false) {\n      this.evaluate();\n    } else {\n      this.next();\n    }\n  }\n\n  render() {\n    // console.log(this.state.selectedAnswer)\n    let question;\n    let options;\n    let answer;\n    let opt;\n\n    if (this.state.questions.length > 1) {\n      question = this.state.questions[this.state.qNumber - 1].question;\n      answer = this.state.questions[this.state.qNumber - 1].correctAns;\n      options = this.state.questions[this.state.qNumber - 1].options;\n      opt = options.map((ans, i) => {\n        return React.createElement(Options, {\n          key: i,\n          option: ans,\n          answer: answer,\n          change: a => this.change(a),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        });\n      });\n    } // spinner\n\n\n    if (this.state.evaluate === 'spin') {\n      opt = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      });\n    } // correct answer\n\n\n    if (this.state.evaluate === 'correct') {\n      opt = React.createElement(\"div\", {\n        className: \"evaluate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"You are correct!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"The answer is;\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, decodeURIComponent(this.state.questions[this.state.qNumber - 1].correctAns)));\n    } // wrong answer\n\n\n    if (this.state.evaluate === 'wrong') {\n      opt = React.createElement(\"div\", {\n        className: \"evaluate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"You are wrong!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"The answer is;\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, decodeURIComponent(this.state.questions[this.state.qNumber - 1].correctAns)));\n    } // run out of time\n\n\n    if (this.state.evaluate === 'no time') {\n      opt = React.createElement(\"div\", {\n        className: \"evaluate\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"You run out of time. Thinks faster!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"The answer is;\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, decodeURIComponent(this.state.questions[this.state.qNumber - 1].correctAns)));\n    }\n\n    return React.createElement(\"div\", {\n      className: \"play\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Level: \", this.props.level), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Time left: \", this.state.timer === false ? 0 : this.state.timer), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Score: \", this.state.score)), React.createElement(\"div\", {\n      className: \"question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Question \", this.state.qNumber), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, decodeURIComponent(question))), React.createElement(\"div\", {\n      className: \"options\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, opt), React.createElement(\"button\", {\n      disabled: this.state.selectedAnswer === '' ? true : false,\n      onClick: () => {\n        if (this.state.evaluate === false) {\n          this.evaluate();\n        } else {\n          this.next();\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.state.evaluate === false ? 'Check my answer!' : 'Continue!'));\n  }\n\n}\n\nexport default Play;","map":{"version":3,"sources":["/Users/kau/Desktop/GeoGo/Internship/Assignments/quiz/src/container/Play/Play.js"],"names":["React","Component","Options","Spinner","Play","constructor","state","timer","qNumber","questions","score","selectedAnswer","evaluate","componentDidMount","setState","props","setInterval","change","a","setTimeout","correctAns","next","finished","click","render","question","options","answer","opt","length","map","ans","i","decodeURIComponent","level"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport Options from '../../component/Options/Options';\nimport Spinner from '../../component/Spinner/Spinner'\n\nclass Play extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      timer: 15,\n      qNumber: 1,\n      questions: {},\n      score: 0,\n      selectedAnswer: '',\n      evaluate: false\n    }\n  }\n\n  // set the questions to the state\n  componentDidMount(){\n    this.setState({\n      questions: this.props.questions,\n    })\n    this.timer()\n  }\n\n  // clock timer\n  timer(){\n      setInterval(() => {\n        if(this.state.timer === false) return\n        if(this.state.timer <= 1){\n          this.setState({\n            evaluate: 'spin',\n        })\n        }\n        if(this.state.timer === 0){\n          this.setState({\n            evaluate: 'no time',\n            selectedAnswer: false\n        })\n        } else {\n          this.setState({\n            timer: this.state.timer - 1\n          })\n        }\n      }, 1000)\n  }\n\n  // change selected answer\n  change(a){\n    this.setState({selectedAnswer: a})\n  }\n\n  // evaluate if answer is right\n  evaluate(){\n    setTimeout(()=>{\n      this.setState({evaluate: 'spin', timer: false})\n    }, 250)\n\n    setTimeout(()=>{\n      if (this.state.selectedAnswer === this.state.questions[this.state.qNumber - 1].correctAns){\n        this.setState({\n          evaluate: 'correct',\n          score: this.state.score + 1,\n        })\n        \n      } else if (this.state.selectedAnswer !== this.state.questions[this.state.qNumber - 1].correctAns){\n        this.setState({\n          evaluate: 'wrong'\n        })\n      }\n    }, 450)\n\n  }\n\n  next(){\n    if(this.state.qNumber === 10){\n      this.state.score >= 6 ? this.props.finished('pass') : this.props.finished('fail')\n    }\n    setTimeout(()=>{\n      this.setState({evaluate: 'spin', timer: false})\n    }, 150)\n    setTimeout(()=>{\n      this.setState({\n        timer: 15,\n        qNumber: this.state.qNumber + 1,\n        evaluate: false,\n        selectedAnswer: ''\n      })\n    },300)\n  }\n\n\n  click(){\n    if(this.state.evaluate === false){\n      this.evaluate()\n    } else {\n      this.next()\n    }\n  }\n\n\n\n  render(){\n    // console.log(this.state.selectedAnswer)\n\n    let question;\n    let options;\n    let answer;\n    let opt;\n                          \n    if(this.state.questions.length > 1){\n\n      question = this.state.questions[this.state.qNumber - 1].question\n      answer = this.state.questions[this.state.qNumber - 1].correctAns\n      options = this.state.questions[this.state.qNumber -1].options\n      opt = options.map((ans, i) => {\n        return <Options \n                  key={i}\n                  option={ans}\n                  answer={answer}\n                  change={(a)=>this.change(a)} />\n      })\n    }\n\n    // spinner\n    if(this.state.evaluate === 'spin'){\n      opt = <Spinner />\n    }\n    \n    // correct answer\n    if(this.state.evaluate === 'correct'){\n        opt = <div className=\"evaluate\">\n                <h1 >You are correct!</h1>\n                <p>The answer is;</p>\n                <p>{decodeURIComponent(this.state.questions[this.state.qNumber - 1].correctAns)}</p>\n              </div>\n    }\n\n    // wrong answer\n    if(this.state.evaluate === 'wrong'){\n         opt = <div className=\"evaluate\">\n                 <h1 >You are wrong!</h1>\n                 <p>The answer is;</p>\n                 <p>{decodeURIComponent(this.state.questions[this.state.qNumber - 1].correctAns)}</p>\n               </div>\n    }\n\n    // run out of time\n    if(this.state.evaluate === 'no time'){\n      opt = <div className=\"evaluate\">\n              <h1 >You run out of time. Thinks faster!</h1>\n              <p>The answer is;</p>\n              <p>{decodeURIComponent(this.state.questions[this.state.qNumber - 1].correctAns)}</p>\n            </div>\n    }\n\n\n\n    return (\n      <div className=\"play\">\n\n        <div className=\"top\">\n          <p>Level: {this.props.level}</p>\n          <p>Time left: {this.state.timer === false ? 0 : this.state.timer}</p>\n          <p>Score: {this.state.score}</p>\n        </div>\n\n        <div className=\"question\">\n          <h1>Question {this.state.qNumber}</h1>\n          <h1>{decodeURIComponent(question)}</h1>\n        </div>\n\n\n        <div className='options'>\n          {opt}\n        </div>\n       \n        <button\n          disabled={this.state.selectedAnswer === '' ? true : false}\n          onClick={()=>{\n            if(this.state.evaluate === false){\n              this.evaluate()\n            } else {\n              this.next()\n            }\n          }}>\n            {this.state.evaluate === false ? 'Check my answer!' :\n              'Continue!'}</button>\n      </div>\n  )}\n}\n\nexport default Play"]},"metadata":{},"sourceType":"module"}